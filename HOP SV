loadstring(game:HttpGet("https://raw.githubusercontent.com/TommNger/MyHub.lua/main/FindSeverRare.lua"))()

-- ===== bổ sung: hop server > 8 players, tránh server cũ =====
do
    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")
    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer

    local MIN_PLAYERS_FOR_HOP = 8  -- "trên 8" => strictly greater than 8
    -- Bảng nhớ server đã hop trong phiên hiện tại, tránh quay lại
    _G.__HOP__seenServers = _G.__HOP__seenServers or {}

    -- Lấy trang server public
    local function fetchServerPage(placeId, cursor)
        local base = ("https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=Asc&limit=100")
        local url = string.format(base, tostring(placeId))
        if cursor and cursor ~= "" then
            url = url .. "&cursor=" .. HttpService:UrlEncode(cursor)
        end
        local ok, res = pcall(function() return HttpService:GetAsync(url) end)
        if not ok then return nil, res end
        local ok2, data = pcall(function() return HttpService:JSONDecode(res) end)
        if not ok2 then return nil, data end
        return data
    end

    -- Tìm tất cả server phù hợp (playing > MIN_PLAYERS_FOR_HOP) và không ở seenServers và khác job hiện tại
    local function collectSuitableServers(placeId)
        local results = {}
        local cursor = nil
        repeat
            local page, err = fetchServerPage(placeId, cursor)
            if not page then
                warn("[Hop] Lỗi khi lấy server list:", err)
                break
            end
            if page.data and type(page.data) == "table" then
                for _, server in ipairs(page.data) do
                    local playing = tonumber(server.playing) or 0
                    local serverId = tostring(server.id or server.id or server.id)
                    if playing > MIN_PLAYERS_FOR_HOP and serverId ~= tostring(game.JobId) and not _G.__HOP__seenServers[serverId] then
                        table.insert(results, { id = serverId, playing = playing })
                    end
                end
            end
            cursor = page.nextPageCursor or page.nextPageToken or page.next_cursor or nil
        until not cursor or cursor == ""
        return results
    end

    -- Chọn 1 server phù hợp (ngẫu nhiên trong list) và teleport
    function __HopToDifferentServerWithMinPlayers()
        local placeId = tostring(game.PlaceId or error("No PlaceId"))
        local candidates = collectSuitableServers(placeId)
        if #candidates == 0 then
            print("[Hop] Không tìm thấy server nào có hơn " .. tostring(MIN_PLAYERS_FOR_HOP) .. " người (hoặc đã hop hết các server trong phiên).")
            return false
        end
        -- chọn ngẫu nhiên 1 candidate để giảm khả năng join cùng server nhiều lần
        local idx = math.random(1, #candidates)
        local server = candidates[idx]
        local serverId = server.id
        -- đánh dấu là đã hop (tránh quay lại)
        _G.__HOP__seenServers[serverId] = true

        local success, err = pcall(function()
            if localPlayer then
                TeleportService:TeleportToPlaceInstance(tonumber(placeId), serverId, localPlayer)
            else
                TeleportService:TeleportToPlaceInstance(tonumber(placeId), serverId)
            end
        end)
        if not success then
            warn("[Hop] Lỗi teleport:", err)
            return false
        end
        print("[Hop] Đang teleport tới server:", serverId, "(playing=".. tostring(server.playing) ..")")
        return true
    end

    -- Hook vào _G.RareFound nếu có — gọi hàm hop khi muốn (mặc định comment để tránh loop)
    if type(_G) == "table" and type(_G.RareFound) == "function" then
        local oldRF = _G.RareFound
        _G.RareFound = function(name, ...)
            -- giữ hành vi gốc
            local ok, ret = pcall(function() return oldRF(name, ...) end)
            -- nếu muốn tự động hop khi phát hiện rare: bỏ comment dòng dưới đây
            -- spawn(function() wait(0.5); pcall(__HopToDifferentServerWithMinPlayers) end)
            return ret
        end
    end

    -- Tiện: expose hàm và config cho người dùng test từ console
    _G.__HopToDifferentServerWithMinPlayers = __HopToDifferentServerWithMinPlayers
    _G.__HOP__MIN_PLAYERS = MIN_PLAYERS_FOR_HOP

    print("[HopModule] Active. MIN_PLAYERS_FOR_HOP =", MIN_PLAYERS_FOR_HOP, "-> call __HopToDifferentServerWithMinPlayers() to hop.")
end
